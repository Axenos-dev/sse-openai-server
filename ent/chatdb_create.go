// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Axenos-dev/sse-openai-server/ent/chatdb"
)

// ChatDBCreate is the builder for creating a ChatDB entity.
type ChatDBCreate struct {
	config
	mutation *ChatDBMutation
	hooks    []Hook
}

// SetTopic sets the "topic" field.
func (cdc *ChatDBCreate) SetTopic(s string) *ChatDBCreate {
	cdc.mutation.SetTopic(s)
	return cdc
}

// SetMessage sets the "message" field.
func (cdc *ChatDBCreate) SetMessage(s string) *ChatDBCreate {
	cdc.mutation.SetMessage(s)
	return cdc
}

// SetResponse sets the "response" field.
func (cdc *ChatDBCreate) SetResponse(s string) *ChatDBCreate {
	cdc.mutation.SetResponse(s)
	return cdc
}

// SetStatus sets the "status" field.
func (cdc *ChatDBCreate) SetStatus(i int) *ChatDBCreate {
	cdc.mutation.SetStatus(i)
	return cdc
}

// SetTimestamp sets the "timestamp" field.
func (cdc *ChatDBCreate) SetTimestamp(i int64) *ChatDBCreate {
	cdc.mutation.SetTimestamp(i)
	return cdc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cdc *ChatDBCreate) SetNillableTimestamp(i *int64) *ChatDBCreate {
	if i != nil {
		cdc.SetTimestamp(*i)
	}
	return cdc
}

// Mutation returns the ChatDBMutation object of the builder.
func (cdc *ChatDBCreate) Mutation() *ChatDBMutation {
	return cdc.mutation
}

// Save creates the ChatDB in the database.
func (cdc *ChatDBCreate) Save(ctx context.Context) (*ChatDB, error) {
	cdc.defaults()
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *ChatDBCreate) SaveX(ctx context.Context) *ChatDB {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *ChatDBCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *ChatDBCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *ChatDBCreate) defaults() {
	if _, ok := cdc.mutation.Timestamp(); !ok {
		v := chatdb.DefaultTimestamp()
		cdc.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdc *ChatDBCreate) check() error {
	if _, ok := cdc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "ChatDB.topic"`)}
	}
	if _, ok := cdc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "ChatDB.message"`)}
	}
	if _, ok := cdc.mutation.Response(); !ok {
		return &ValidationError{Name: "response", err: errors.New(`ent: missing required field "ChatDB.response"`)}
	}
	if _, ok := cdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ChatDB.status"`)}
	}
	if v, ok := cdc.mutation.Status(); ok {
		if err := chatdb.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ChatDB.status": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "ChatDB.timestamp"`)}
	}
	return nil
}

func (cdc *ChatDBCreate) sqlSave(ctx context.Context) (*ChatDB, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *ChatDBCreate) createSpec() (*ChatDB, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatDB{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(chatdb.Table, sqlgraph.NewFieldSpec(chatdb.FieldID, field.TypeInt))
	)
	if value, ok := cdc.mutation.Topic(); ok {
		_spec.SetField(chatdb.FieldTopic, field.TypeString, value)
		_node.Topic = value
	}
	if value, ok := cdc.mutation.Message(); ok {
		_spec.SetField(chatdb.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := cdc.mutation.Response(); ok {
		_spec.SetField(chatdb.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	if value, ok := cdc.mutation.Status(); ok {
		_spec.SetField(chatdb.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cdc.mutation.Timestamp(); ok {
		_spec.SetField(chatdb.FieldTimestamp, field.TypeInt64, value)
		_node.Timestamp = value
	}
	return _node, _spec
}

// ChatDBCreateBulk is the builder for creating many ChatDB entities in bulk.
type ChatDBCreateBulk struct {
	config
	err      error
	builders []*ChatDBCreate
}

// Save creates the ChatDB entities in the database.
func (cdcb *ChatDBCreateBulk) Save(ctx context.Context) ([]*ChatDB, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*ChatDB, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatDBMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *ChatDBCreateBulk) SaveX(ctx context.Context) []*ChatDB {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *ChatDBCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *ChatDBCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
