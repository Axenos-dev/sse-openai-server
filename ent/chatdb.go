// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Axenos-dev/sse-openai-server/ent/chatdb"
)

// ChatDB is the model entity for the ChatDB schema.
type ChatDB struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Response holds the value of the "response" field.
	Response string `json:"response,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp    int64 `json:"timestamp,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatDB) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatdb.FieldID, chatdb.FieldStatus, chatdb.FieldTimestamp:
			values[i] = new(sql.NullInt64)
		case chatdb.FieldTopic, chatdb.FieldMessage, chatdb.FieldResponse:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatDB fields.
func (cd *ChatDB) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatdb.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cd.ID = int(value.Int64)
		case chatdb.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				cd.Topic = value.String
			}
		case chatdb.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				cd.Message = value.String
			}
		case chatdb.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				cd.Response = value.String
			}
		case chatdb.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cd.Status = int(value.Int64)
			}
		case chatdb.FieldTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				cd.Timestamp = value.Int64
			}
		default:
			cd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatDB.
// This includes values selected through modifiers, order, etc.
func (cd *ChatDB) Value(name string) (ent.Value, error) {
	return cd.selectValues.Get(name)
}

// Update returns a builder for updating this ChatDB.
// Note that you need to call ChatDB.Unwrap() before calling this method if this ChatDB
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *ChatDB) Update() *ChatDBUpdateOne {
	return NewChatDBClient(cd.config).UpdateOne(cd)
}

// Unwrap unwraps the ChatDB entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *ChatDB) Unwrap() *ChatDB {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatDB is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *ChatDB) String() string {
	var builder strings.Builder
	builder.WriteString("ChatDB(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("topic=")
	builder.WriteString(cd.Topic)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(cd.Message)
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(cd.Response)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cd.Status))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(fmt.Sprintf("%v", cd.Timestamp))
	builder.WriteByte(')')
	return builder.String()
}

// ChatDBs is a parsable slice of ChatDB.
type ChatDBs []*ChatDB
