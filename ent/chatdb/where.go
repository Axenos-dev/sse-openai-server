// Code generated by ent, DO NOT EDIT.

package chatdb

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Axenos-dev/sse-openai-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLTE(FieldID, id))
}

// Topic applies equality check predicate on the "topic" field. It's identical to TopicEQ.
func Topic(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldTopic, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldMessage, v))
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldResponse, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldStatus, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldTimestamp, v))
}

// TopicEQ applies the EQ predicate on the "topic" field.
func TopicEQ(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldTopic, v))
}

// TopicNEQ applies the NEQ predicate on the "topic" field.
func TopicNEQ(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNEQ(FieldTopic, v))
}

// TopicIn applies the In predicate on the "topic" field.
func TopicIn(vs ...string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldIn(FieldTopic, vs...))
}

// TopicNotIn applies the NotIn predicate on the "topic" field.
func TopicNotIn(vs ...string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNotIn(FieldTopic, vs...))
}

// TopicGT applies the GT predicate on the "topic" field.
func TopicGT(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGT(FieldTopic, v))
}

// TopicGTE applies the GTE predicate on the "topic" field.
func TopicGTE(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGTE(FieldTopic, v))
}

// TopicLT applies the LT predicate on the "topic" field.
func TopicLT(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLT(FieldTopic, v))
}

// TopicLTE applies the LTE predicate on the "topic" field.
func TopicLTE(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLTE(FieldTopic, v))
}

// TopicContains applies the Contains predicate on the "topic" field.
func TopicContains(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldContains(FieldTopic, v))
}

// TopicHasPrefix applies the HasPrefix predicate on the "topic" field.
func TopicHasPrefix(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldHasPrefix(FieldTopic, v))
}

// TopicHasSuffix applies the HasSuffix predicate on the "topic" field.
func TopicHasSuffix(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldHasSuffix(FieldTopic, v))
}

// TopicEqualFold applies the EqualFold predicate on the "topic" field.
func TopicEqualFold(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEqualFold(FieldTopic, v))
}

// TopicContainsFold applies the ContainsFold predicate on the "topic" field.
func TopicContainsFold(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldContainsFold(FieldTopic, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldContainsFold(FieldMessage, v))
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldResponse, v))
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNEQ(FieldResponse, v))
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldIn(FieldResponse, vs...))
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNotIn(FieldResponse, vs...))
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGT(FieldResponse, v))
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGTE(FieldResponse, v))
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLT(FieldResponse, v))
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLTE(FieldResponse, v))
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldContains(FieldResponse, v))
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldHasPrefix(FieldResponse, v))
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldHasSuffix(FieldResponse, v))
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEqualFold(FieldResponse, v))
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldContainsFold(FieldResponse, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLTE(FieldStatus, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v int64) predicate.ChatDB {
	return predicate.ChatDB(sql.FieldLTE(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatDB) predicate.ChatDB {
	return predicate.ChatDB(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatDB) predicate.ChatDB {
	return predicate.ChatDB(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatDB) predicate.ChatDB {
	return predicate.ChatDB(sql.NotPredicates(p))
}
