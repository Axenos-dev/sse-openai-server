// Code generated by ent, DO NOT EDIT.

package chatdb

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chatdb type in the database.
	Label = "chat_db"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTopic holds the string denoting the topic field in the database.
	FieldTopic = "topic"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldResponse holds the string denoting the response field in the database.
	FieldResponse = "response"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// Table holds the table name of the chatdb in the database.
	Table = "chat_dbs"
)

// Columns holds all SQL columns for chatdb fields.
var Columns = []string{
	FieldID,
	FieldTopic,
	FieldMessage,
	FieldResponse,
	FieldStatus,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int) error
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() int64
)

// OrderOption defines the ordering options for the ChatDB queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTopic orders the results by the topic field.
func ByTopic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByResponse orders the results by the response field.
func ByResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponse, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}
