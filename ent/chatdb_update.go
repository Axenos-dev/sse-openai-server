// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Axenos-dev/sse-openai-server/ent/chatdb"
	"github.com/Axenos-dev/sse-openai-server/ent/predicate"
)

// ChatDBUpdate is the builder for updating ChatDB entities.
type ChatDBUpdate struct {
	config
	hooks    []Hook
	mutation *ChatDBMutation
}

// Where appends a list predicates to the ChatDBUpdate builder.
func (cdu *ChatDBUpdate) Where(ps ...predicate.ChatDB) *ChatDBUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetTopic sets the "topic" field.
func (cdu *ChatDBUpdate) SetTopic(s string) *ChatDBUpdate {
	cdu.mutation.SetTopic(s)
	return cdu
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (cdu *ChatDBUpdate) SetNillableTopic(s *string) *ChatDBUpdate {
	if s != nil {
		cdu.SetTopic(*s)
	}
	return cdu
}

// SetMessage sets the "message" field.
func (cdu *ChatDBUpdate) SetMessage(s string) *ChatDBUpdate {
	cdu.mutation.SetMessage(s)
	return cdu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cdu *ChatDBUpdate) SetNillableMessage(s *string) *ChatDBUpdate {
	if s != nil {
		cdu.SetMessage(*s)
	}
	return cdu
}

// SetResponse sets the "response" field.
func (cdu *ChatDBUpdate) SetResponse(s string) *ChatDBUpdate {
	cdu.mutation.SetResponse(s)
	return cdu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cdu *ChatDBUpdate) SetNillableResponse(s *string) *ChatDBUpdate {
	if s != nil {
		cdu.SetResponse(*s)
	}
	return cdu
}

// SetStatus sets the "status" field.
func (cdu *ChatDBUpdate) SetStatus(i int) *ChatDBUpdate {
	cdu.mutation.ResetStatus()
	cdu.mutation.SetStatus(i)
	return cdu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cdu *ChatDBUpdate) SetNillableStatus(i *int) *ChatDBUpdate {
	if i != nil {
		cdu.SetStatus(*i)
	}
	return cdu
}

// AddStatus adds i to the "status" field.
func (cdu *ChatDBUpdate) AddStatus(i int) *ChatDBUpdate {
	cdu.mutation.AddStatus(i)
	return cdu
}

// SetTimestamp sets the "timestamp" field.
func (cdu *ChatDBUpdate) SetTimestamp(i int64) *ChatDBUpdate {
	cdu.mutation.ResetTimestamp()
	cdu.mutation.SetTimestamp(i)
	return cdu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cdu *ChatDBUpdate) SetNillableTimestamp(i *int64) *ChatDBUpdate {
	if i != nil {
		cdu.SetTimestamp(*i)
	}
	return cdu
}

// AddTimestamp adds i to the "timestamp" field.
func (cdu *ChatDBUpdate) AddTimestamp(i int64) *ChatDBUpdate {
	cdu.mutation.AddTimestamp(i)
	return cdu
}

// Mutation returns the ChatDBMutation object of the builder.
func (cdu *ChatDBUpdate) Mutation() *ChatDBMutation {
	return cdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *ChatDBUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *ChatDBUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *ChatDBUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *ChatDBUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdu *ChatDBUpdate) check() error {
	if v, ok := cdu.mutation.Status(); ok {
		if err := chatdb.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ChatDB.status": %w`, err)}
		}
	}
	return nil
}

func (cdu *ChatDBUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatdb.Table, chatdb.Columns, sqlgraph.NewFieldSpec(chatdb.FieldID, field.TypeInt))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.Topic(); ok {
		_spec.SetField(chatdb.FieldTopic, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Message(); ok {
		_spec.SetField(chatdb.FieldMessage, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Response(); ok {
		_spec.SetField(chatdb.FieldResponse, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Status(); ok {
		_spec.SetField(chatdb.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedStatus(); ok {
		_spec.AddField(chatdb.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.Timestamp(); ok {
		_spec.SetField(chatdb.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := cdu.mutation.AddedTimestamp(); ok {
		_spec.AddField(chatdb.FieldTimestamp, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatdb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// ChatDBUpdateOne is the builder for updating a single ChatDB entity.
type ChatDBUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatDBMutation
}

// SetTopic sets the "topic" field.
func (cduo *ChatDBUpdateOne) SetTopic(s string) *ChatDBUpdateOne {
	cduo.mutation.SetTopic(s)
	return cduo
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (cduo *ChatDBUpdateOne) SetNillableTopic(s *string) *ChatDBUpdateOne {
	if s != nil {
		cduo.SetTopic(*s)
	}
	return cduo
}

// SetMessage sets the "message" field.
func (cduo *ChatDBUpdateOne) SetMessage(s string) *ChatDBUpdateOne {
	cduo.mutation.SetMessage(s)
	return cduo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cduo *ChatDBUpdateOne) SetNillableMessage(s *string) *ChatDBUpdateOne {
	if s != nil {
		cduo.SetMessage(*s)
	}
	return cduo
}

// SetResponse sets the "response" field.
func (cduo *ChatDBUpdateOne) SetResponse(s string) *ChatDBUpdateOne {
	cduo.mutation.SetResponse(s)
	return cduo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cduo *ChatDBUpdateOne) SetNillableResponse(s *string) *ChatDBUpdateOne {
	if s != nil {
		cduo.SetResponse(*s)
	}
	return cduo
}

// SetStatus sets the "status" field.
func (cduo *ChatDBUpdateOne) SetStatus(i int) *ChatDBUpdateOne {
	cduo.mutation.ResetStatus()
	cduo.mutation.SetStatus(i)
	return cduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cduo *ChatDBUpdateOne) SetNillableStatus(i *int) *ChatDBUpdateOne {
	if i != nil {
		cduo.SetStatus(*i)
	}
	return cduo
}

// AddStatus adds i to the "status" field.
func (cduo *ChatDBUpdateOne) AddStatus(i int) *ChatDBUpdateOne {
	cduo.mutation.AddStatus(i)
	return cduo
}

// SetTimestamp sets the "timestamp" field.
func (cduo *ChatDBUpdateOne) SetTimestamp(i int64) *ChatDBUpdateOne {
	cduo.mutation.ResetTimestamp()
	cduo.mutation.SetTimestamp(i)
	return cduo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (cduo *ChatDBUpdateOne) SetNillableTimestamp(i *int64) *ChatDBUpdateOne {
	if i != nil {
		cduo.SetTimestamp(*i)
	}
	return cduo
}

// AddTimestamp adds i to the "timestamp" field.
func (cduo *ChatDBUpdateOne) AddTimestamp(i int64) *ChatDBUpdateOne {
	cduo.mutation.AddTimestamp(i)
	return cduo
}

// Mutation returns the ChatDBMutation object of the builder.
func (cduo *ChatDBUpdateOne) Mutation() *ChatDBMutation {
	return cduo.mutation
}

// Where appends a list predicates to the ChatDBUpdate builder.
func (cduo *ChatDBUpdateOne) Where(ps ...predicate.ChatDB) *ChatDBUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *ChatDBUpdateOne) Select(field string, fields ...string) *ChatDBUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated ChatDB entity.
func (cduo *ChatDBUpdateOne) Save(ctx context.Context) (*ChatDB, error) {
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *ChatDBUpdateOne) SaveX(ctx context.Context) *ChatDB {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *ChatDBUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *ChatDBUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cduo *ChatDBUpdateOne) check() error {
	if v, ok := cduo.mutation.Status(); ok {
		if err := chatdb.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ChatDB.status": %w`, err)}
		}
	}
	return nil
}

func (cduo *ChatDBUpdateOne) sqlSave(ctx context.Context) (_node *ChatDB, err error) {
	if err := cduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatdb.Table, chatdb.Columns, sqlgraph.NewFieldSpec(chatdb.FieldID, field.TypeInt))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatDB.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatdb.FieldID)
		for _, f := range fields {
			if !chatdb.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatdb.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.Topic(); ok {
		_spec.SetField(chatdb.FieldTopic, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Message(); ok {
		_spec.SetField(chatdb.FieldMessage, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Response(); ok {
		_spec.SetField(chatdb.FieldResponse, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Status(); ok {
		_spec.SetField(chatdb.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedStatus(); ok {
		_spec.AddField(chatdb.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.Timestamp(); ok {
		_spec.SetField(chatdb.FieldTimestamp, field.TypeInt64, value)
	}
	if value, ok := cduo.mutation.AddedTimestamp(); ok {
		_spec.AddField(chatdb.FieldTimestamp, field.TypeInt64, value)
	}
	_node = &ChatDB{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatdb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
